<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:adonisUI="clr-namespace:AdonisUI;assembly=AdonisUI"
	xmlns:controls="clr-namespace:DivinityModManager.Controls"
	xmlns:conv="clr-namespace:DivinityModManager.Converters"
	xmlns:data="clr-namespace:DivinityModManager.Models;assembly=DivinityModManagerCore"
	xmlns:dd="urn:gong-wpf-dragdrop"
	xmlns:local="clr-namespace:DivinityModManager.Views"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:vm="clr-namespace:DivinityModManager.ViewModels;assembly=DivinityModManagerCore"
	xmlns:xc="http://schemas.xceed.com/wpf/xaml/toolkit"
	xmlns:xconv="clr-namespace:Xceed.Wpf.Toolkit.Converters;assembly=Xceed.Wpf.Toolkit"
	x:Name="MainResources">
	<conv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
	<conv:ModIsAvailableConverter x:Key="ModIsAvailableConverter" />
	<conv:StringToUriConverter x:Key="StringToUriConverter" />
	<xconv:ProgressBarWidthConverter x:Key="ProgressBarWidthConverter" />
	<BitmapImage x:Key="SaveImage" UriSource="pack://application:,,,/Resources/Icons/Save_16x.png" />
	<BitmapImage x:Key="SaveAsImage" UriSource="pack://application:,,,/Resources/Icons/SaveAs_16x.png" />
	<BitmapImage x:Key="SaveDisabledImage" UriSource="pack://application:,,,/Resources/Icons/SaveGrey_16x.png" />
	<BitmapImage x:Key="AddItemImage" UriSource="pack://application:,,,/Resources/Icons/AddItem_16x.png" />
	<BitmapImage x:Key="ExportDataImage" UriSource="pack://application:,,,/Resources/Icons/ExportData_16x.png" />
	<BitmapImage x:Key="OpenFolderImage" UriSource="pack://application:,,,/Resources/Icons/OpenFolder_16x.png" />
	<BitmapImage x:Key="RefreshImage" UriSource="pack://application:,,,/Resources/Icons/Refresh_16x.png" />
	<BitmapImage x:Key="ExpandDownImage" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronDown_16x.png" />
	<BitmapImage x:Key="ExpandDownImageDisabled" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronDown_lightGray_16x.png" />
	<BitmapImage x:Key="ExpandUpImage" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronUp_16x.png" />
	<BitmapImage x:Key="ExpandUpImageDisabled" UriSource="pack://application:,,,/Resources/Icons/ExpandChevronUp_lightGrey_16x.png" />
	<BitmapImage x:Key="OpenDOS2Image" UriSource="pack://application:,,,/Resources/Icons/DivinityOS2_EoCApp_16x.png" />
	<BitmapImage x:Key="OpenSteamWorkshopFolderImage" UriSource="pack://application:,,,/Resources/Icons/Steam_16x.png" />
	<BitmapImage x:Key="OpenDonationLinkImage" UriSource="pack://application:,,,/Resources/Icons/Kofi_16x.png" />
	<BitmapImage x:Key="OpenRepoLinkImage" UriSource="pack://application:,,,/Resources/Icons/Github_16x.png" />
	<BitmapImage x:Key="ExportScriptImage" UriSource="pack://application:,,,/Resources/Icons/ExportScript_16x.png" />
	<BitmapImage x:Key="ZipFileImage" UriSource="pack://application:,,,/Resources/Icons/ZipFile_16x.png" />
	<BitmapImage x:Key="ZipFileAsImage" UriSource="pack://application:,,,/Resources/Icons/ZipFileAs_16x.png" />

	<BitmapImage x:Key="DivinityEngine" UriSource="pack://application:,,,/Resources/Icons/DivinityEngineGlasses_64x.png" />

	<BitmapImage x:Key="AlertBar_Close" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Close.png" />
	<BitmapImage x:Key="AlertBar_Close_Hover" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Close_Hover.png" />
	<BitmapImage x:Key="AlertBar_Danger" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Danger_16x.png" />
	<BitmapImage x:Key="AlertBar_Information" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Information_16x.png" />
	<BitmapImage x:Key="AlertBar_Success" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Success_16x.png" />
	<BitmapImage x:Key="AlertBar_Warning" UriSource="pack://application:,,,/Resources/Icons/AlertBar_Warning_16x.png" />

	<Style x:Key="IconButtonStyle" TargetType="Button">
		<Setter Property="Width" Value="24" />
		<Setter Property="Height" Value="24" />
		<Setter Property="Margin" Value="2,0,2,0" />
		<Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
	</Style>
	<Style TargetType="{x:Type controls:AutoGrayableImage}">
		<Setter Property="Width" Value="16" />
		<Setter Property="Height" Value="16" />
		<Setter Property="Margin" Value="2" />
		<Setter Property="Stretch" Value="Uniform" />
	</Style>
	<Style x:Key="VerticalSeparator" TargetType="Rectangle">
		<Setter Property="Width" Value="1" />
		<Setter Property="Margin" Value="16,0,16,0" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="Fill" Value="LightGray" />
	</Style>
	<Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type controls:UnfocusableTextBox}" />

	<DataTemplate DataType="{x:Type data:DivinityProfileData}">
		<TextBlock Text="{Binding Name}" />
	</DataTemplate>
	<DataTemplate DataType="{x:Type data:DivinityLoadOrder}">
		<TextBlock Text="{Binding Name}" />
	</DataTemplate>
	<!--<DataTemplate DataType="{x:Type data:DivinityModSeparator}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<Rectangle Fill="Orange" Opacity="0.2" IsHitTestVisible="False" />
			<TextBlock Text="Unordered Mods:" Background="Transparent" Margin="4" />
			<Separator BorderThickness="1" BorderBrush="Orange" Grid.Row="1" />
		</Grid>
	</DataTemplate>-->
	<DataTemplate DataType="{x:Type data:DivinityModDependencyData}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Grid.Resources>
				<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
					<Style.Triggers>
						<DataTrigger Binding="{Binding Converter={StaticResource ModIsAvailableConverter}}" Value="True">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.SuccessBrush}}" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Converter={StaticResource ModIsAvailableConverter}}" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ErrorBrush}}" />
							<Setter Property="FontWeight" Value="Bold" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Grid.Resources>
			<TextBlock Text="{Binding Name}" />
			<StackPanel
				Grid.Column="1"
				Margin="4,0,0,0"
				Orientation="Horizontal">
				<TextBlock Text="v" />
				<TextBlock Grid.Column="1" Text="{Binding Version.Version}" />
			</StackPanel>
		</Grid>
	</DataTemplate>
	<Style BasedOn="{StaticResource {x:Type ListViewItem}}" TargetType="{x:Type ListViewItem}">
		<!--<Style.Resources>
			<LinearGradientBrush x:Key="ListItemHoverFill_Selected" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0" Color="#FFD1FFD1" />
				<GradientStop Offset="1" Color="#FFA3FFAB" />
			</LinearGradientBrush>
		</Style.Resources>-->

		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
		<Setter Property="Visibility" Value="{Binding Visibility, FallbackValue='Visible'}" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsEditorMod}" Value="True" />
					<Condition Binding="{Binding IsSelected}" Value="False" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background">
						<Setter.Value>
							<SolidColorBrush Opacity="0.15" Color="Lime" />
						</Setter.Value>
					</Setter>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsEditorMod}" Value="True" />
					<Condition Binding="{Binding IsSelected}" Value="True" />
				</MultiDataTrigger.Conditions>
				<MultiDataTrigger.Setters>
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
								<GradientStop Offset="0" Color="#FF02740C" />
								<GradientStop Offset="1" Color="#FF00990D" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</MultiDataTrigger.Setters>
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style
		x:Key="ModOrderListView"
		BasedOn="{StaticResource {x:Type ListView}}"
		TargetType="ListView">
		<Setter Property="dd:DragDrop.IsDragSource" Value="True" />
		<Setter Property="dd:DragDrop.IsDropTarget" Value="True" />
	</Style>
	<DataTemplate x:Key="ModNameTemplate" DataType="{x:Type data:DivinityModData}">
		<TextBlock HorizontalAlignment="Stretch" Text="{Binding Name}">
			<TextBlock.ToolTip>
				<ToolTip>
					<ToolTip.Style>
						<Style BasedOn="{StaticResource {x:Type ToolTip}}" TargetType="ToolTip">
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="ToolTip">
										<Border
											Padding="8"
											Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
											BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
											BorderThickness="2">
											<ContentPresenter />
										</Border>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ToolTip.Style>
					<StackPanel
						x:Name="DescTooltipStackPanel"
						MaxWidth="700"
						Background="Transparent"
						Orientation="Vertical">
						<StackPanel.Resources>
							<Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
								<Setter Property="TextWrapping" Value="Wrap" />
								<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}" />
								<!--<Setter Property="FontFamily" Value="Arial" />-->
							</Style>
							<Style BasedOn="{StaticResource {x:Type ListBox}}" TargetType="ListBox" />
						</StackPanel.Resources>
						<TextBlock
							Margin="2"
							FontSize="16"
							FontWeight="Bold"
							Foreground="{DynamicResource {x:Static adonisUI:Brushes.AlertBrush}}"
							Text="{Binding Name}">
							<TextBlock.Effect>
								<DropShadowEffect
									BlurRadius="4"
									Direction="330"
									Opacity="0.5"
									ShadowDepth="4"
									Color="{DynamicResource {x:Static adonisUI:Colors.Layer3BackgroundColor}}" />
							</TextBlock.Effect>
						</TextBlock>
						<Separator Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1HighlightBorderBrush}}" />
						<!--<html:HtmlPanel
							Background="{DynamicResource {x:Static adonisUI:Brushes.Layer3BackgroundBrush}}"
							Text="{Binding Description}"
							Visibility="{Binding HasDescription, Converter={StaticResource BoolToVisibilityConverter}}" />-->
						<TextBlock
							Margin="2"
							Text="{Binding Description}"
							TextWrapping="Wrap"
							Visibility="{Binding HasDescription, Converter={StaticResource BoolToVisibilityConverter}}" />
						<StackPanel
							Margin="2"
							Orientation="Vertical"
							Visibility="{Binding HasDependencies, Converter={StaticResource BoolToVisibilityConverter}}">
							<TextBlock FontWeight="Bold" Text="Dependencies:" />
							<ListBox
								Margin="2"
								Padding="0"
								BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBorderBrush}}"
								BorderThickness="1"
								ItemsSource="{Binding Dependencies}" />
						</StackPanel>
						<StackPanel Margin="2" Orientation="Horizontal">
							<TextBlock
								Margin="2,2,0,2"
								FontSize="12"
								FontWeight="Bold"
								Foreground="{DynamicResource {x:Static adonisUI:Brushes.ForegroundBrush}}"
								Text="{Binding Type}" />
							<Rectangle Fill="{DynamicResource {x:Static adonisUI:Brushes.AccentHighlightBrush}}" Style="{StaticResource VerticalSeparator}" />
							<TextBlock
								Margin="0,2,2,2"
								FontWeight="Bold"
								Text="{Binding Targets}" />
						</StackPanel>
					</StackPanel>
				</ToolTip>
			</TextBlock.ToolTip>
		</TextBlock>
	</DataTemplate>
	<Style
		x:Key="GridViewLeftContainerStyle"
		BasedOn="{StaticResource {x:Type GridViewColumnHeader}}"
		TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Margin" Value="4,0,0,0" />
	</Style>
	<Style
		x:Key="GridViewCenteredContainerStyle"
		BasedOn="{StaticResource {x:Type GridViewColumnHeader}}"
		TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="2" />
	</Style>
	<DataTemplate x:Key="GridViewTextblockHeaderTemplate">
		<TextBlock Margin="2,0,2,0" Text="{Binding}" />
	</DataTemplate>
	<GridView
		x:Key="ModGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn
				Width="40"
				Header="#"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock
							Margin="2,0,2,0"
							Background="Transparent"
							Text="{Binding Index}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn Width="400" CellTemplate="{StaticResource ModNameTemplate}">
				<GridViewColumn.Header>
					<TextBlock Text="Name" />
				</GridViewColumn.Header>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="50"
				Header="Type"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Type}" ToolTip="{Binding Type}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="75"
				Header="Modes"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Targets}" ToolTip="{Binding Targets}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<GridView
		x:Key="InactiveModGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn
				Width="400"
				CellTemplate="{StaticResource ModNameTemplate}"
				Header="Name"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}" />
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="50"
				Header="Type"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Type}" ToolTip="{Binding Type}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="75"
				Header="Modes"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Targets}" ToolTip="{Binding Targets}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<GridView
		x:Key="NewModsGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn Width="40" HeaderContainerStyle="{StaticResource GridViewCenteredContainerStyle}">
				<GridViewColumn.Header>
					<CheckBox
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Command="{Binding SelectAllNewModsCommand}"
						CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}"
						IsChecked="{Binding AllNewModsSelected}" />
				</GridViewColumn.Header>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<CheckBox
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							IsChecked="{Binding IsSelected}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="400"
				CellTemplate="{StaticResource ModNameTemplate}"
				Header="Name"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}" />
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Author}" ToolTip="{Binding Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Version"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Version.Version}" ToolTip="{Binding Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Type"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Type}" ToolTip="{Binding Type}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Modes"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding Targets}" ToolTip="{Binding Targets}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<DataTemplate x:Key="ModUpdateNameTemplate" DataType="{x:Type data:DivinityModUpdateData}">
		<TextBlock HorizontalAlignment="Stretch" Text="{Binding LocalMod.Name}">
			<TextBlock.ToolTip>
				<StackPanel MaxWidth="700" Orientation="Vertical">
					<TextBlock FontWeight="Bold" Text="{Binding LocalMod.Name}" />
					<TextBlock
						Text="{Binding LocalMod.Description}"
						TextWrapping="Wrap"
						Visibility="{Binding LocalMod.HasDescription, Converter={StaticResource BoolToVisibilityConverter}}" />
					<StackPanel
						Margin="2"
						Orientation="Vertical"
						Visibility="{Binding LocalMod.HasDependencies, Converter={StaticResource BoolToVisibilityConverter}}">
						<TextBlock FontWeight="Bold" Text="Dependencies:" />
						<ListBox
							Margin="0"
							Padding="0"
							BorderThickness="0"
							ItemsSource="{Binding LocalMod.Dependencies}" />
					</StackPanel>
					<StackPanel Orientation="Horizontal">
						<TextBlock Padding="0,0,2,0" Text="Mod Type: " />
						<TextBlock Text="{Binding LocalMod.Type}" />
					</StackPanel>
					<StackPanel Orientation="Horizontal">
						<TextBlock Padding="0,0,4,0" Text="Modes" />
						<TextBlock Text="{Binding LocalMod.Targets}" />
					</StackPanel>
				</StackPanel>
			</TextBlock.ToolTip>
		</TextBlock>
	</DataTemplate>
	<GridView
		x:Key="ModUpdatesGridView"
		x:Shared="False"
		AllowsColumnReorder="True"
		ColumnHeaderContainerStyle="{StaticResource GridViewLeftContainerStyle}">
		<GridView.Columns>
			<GridViewColumn Width="40" HeaderContainerStyle="{StaticResource GridViewCenteredContainerStyle}">
				<GridViewColumn.Header>
					<CheckBox
						HorizontalAlignment="Center"
						VerticalAlignment="Center"
						Command="{Binding SelectAllUpdatesCommand}"
						CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}"
						IsChecked="{Binding AllModUpdatesSelected}" />
				</GridViewColumn.Header>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<CheckBox
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							IsChecked="{Binding IsSelected}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="400"
				CellTemplate="{StaticResource ModUpdateNameTemplate}"
				Header="Name"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}" />
			<GridViewColumn
				Width="100"
				Header="Author"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Author}" ToolTip="{Binding WorkshopMod.Author}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Current"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.HeaderContainerStyle>
					<Style BasedOn="{StaticResource GridViewLeftContainerStyle}" TargetType="{x:Type GridViewColumnHeader}">
						<Setter Property="Control.ToolTip" Value="Current Version" />
					</Style>
				</GridViewColumn.HeaderContainerStyle>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding LocalMod.Version.Version}" ToolTip="{Binding LocalMod.Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="New"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.HeaderContainerStyle>
					<Style BasedOn="{StaticResource GridViewLeftContainerStyle}" TargetType="{x:Type GridViewColumnHeader}">
						<Setter Property="Control.ToolTip" Value="Workshop Mod's Version" />
					</Style>
				</GridViewColumn.HeaderContainerStyle>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Version.Version}" ToolTip="{Binding WorkshopMod.Version.Version}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Modified Date"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.HeaderContainerStyle>
					<Style BasedOn="{StaticResource GridViewLeftContainerStyle}" TargetType="{x:Type GridViewColumnHeader}">
						<Setter Property="Control.ToolTip" Value="Workshop Mod's Last Modified Date" />
					</Style>
				</GridViewColumn.HeaderContainerStyle>
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.LastModified}" ToolTip="{Binding WorkshopMod.LastModified}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="80"
				Header="Type"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Type}" ToolTip="{Binding WorkshopMod.Type}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn
				Width="100"
				Header="Modes"
				HeaderTemplate="{StaticResource GridViewTextblockHeaderTemplate}">
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<TextBlock Text="{Binding WorkshopMod.Targets}" ToolTip="{Binding WorkshopMod.Targets}" />
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
		</GridView.Columns>
	</GridView>
	<Style x:Key="BusyIndicatorProgressStyle" TargetType="{x:Type xc:BusyIndicator}">
		<Setter Property="BusyContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid
						Margin="4"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<TextBlock
							HorizontalAlignment="Center"
							FontSize="16"
							FontWeight="Bold"
							Text="{Binding MainProgressTitle, FallbackValue='Archiving...'}" />
						<DockPanel Grid.Row="1" Margin="8">
							<TextBlock
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								DockPanel.Dock="Bottom"
								Text="{Binding MainProgressWorkText, FallbackValue='Archiving pak 4/10...'}"
								TextAlignment="Center" />
							<ProgressBar
								MinHeight="15"
								VerticalAlignment="Center"
								DockPanel.Dock="Top"
								Maximum="1"
								Value="{Binding MainProgressValue, FallbackValue='0'}" />
						</DockPanel>
						<Button
							Grid.Row="2"
							Margin="8,0,8,8"
							Padding="20,4"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Command="{Binding CancelMainProgressCommand}"
							Content="Cancel"
							Visibility="{Binding CanCancelProgress, Converter={StaticResource BoolToVisibilityConverter}}" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="OverlayStyle">
			<Setter.Value>
				<Style TargetType="Rectangle">
					<Setter Property="Fill" Value="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}" />
					<Setter Property="Opacity" Value="0.75" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ProgressBarStyle">
			<Setter.Value>
				<Style BasedOn="{StaticResource {x:Type ProgressBar}}" TargetType="ProgressBar">
					<Setter Property="Visibility" Value="Collapsed" />
					<Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUI:Brushes.AccentInteractionBrush}}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xc:BusyIndicator}">
					<Grid>
						<ContentControl
							x:Name="content"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							Focusable="False"
							IsTabStop="False" />
						<Rectangle x:Name="overlay" Style="{TemplateBinding OverlayStyle}" />
						<ContentPresenter x:Name="busycontent">
							<ContentPresenter.Content>
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="2*" />
										<RowDefinition Height="1*" />
										<RowDefinition Height="2*" />
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="2*" />
										<ColumnDefinition Width="6*" />
										<ColumnDefinition Width="2*" />
									</Grid.ColumnDefinitions>
									<Grid
										Grid.Row="1"
										Grid.Column="1"
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch">
										<Border
											Background="{DynamicResource {x:Static adonisUI:Brushes.Layer4BackgroundBrush}}"
											BorderBrush="{DynamicResource {x:Static adonisUI:Brushes.Layer4InteractionBorderBrush}}"
											BorderThickness="1"
											CornerRadius="2">

											<Border
												Margin="1"
												Background="{DynamicResource {x:Static adonisUI:Brushes.Layer1BackgroundBrush}}"
												CornerRadius="1.5">
												<Grid x:Name="_grid" MinWidth="150">
													<Grid.RowDefinitions>
														<RowDefinition />
														<RowDefinition Height="Auto" />
													</Grid.RowDefinitions>
													<ContentPresenter
														x:Name="busyContent"
														Margin="8"
														HorizontalAlignment="Stretch"
														Content="{TemplateBinding BusyContent}"
														ContentTemplate="{TemplateBinding BusyContentTemplate}" />
													<ProgressBar Grid.Row="1" Style="{TemplateBinding ProgressBarStyle}">
														<ProgressBar.Width>
															<MultiBinding Converter="{StaticResource ProgressBarWidthConverter}">
																<Binding ElementName="busyContent" Path="ActualWidth" />
																<Binding ElementName="_grid" Path="MinWidth" />
															</MultiBinding>
														</ProgressBar.Width>
													</ProgressBar>
												</Grid>
											</Border>
										</Border>
									</Grid>
								</Grid>
							</ContentPresenter.Content>
						</ContentPresenter>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="VisibilityStates">
								<VisualState x:Name="Hidden">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="busycontent"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Collapsed</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="overlay"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Collapsed</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Visible">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="busycontent"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="overlay"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="BusyStatusStates">
								<VisualState x:Name="Idle">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="content"
											Storyboard.TargetProperty="(Control.IsEnabled)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<sys:Boolean>True</sys:Boolean>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Busy">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											BeginTime="00:00:00"
											Storyboard.TargetName="content"
											Storyboard.TargetProperty="(Control.IsEnabled)"
											Duration="00:00:00.001">
											<DiscreteObjectKeyFrame KeyTime="00:00:00">
												<DiscreteObjectKeyFrame.Value>
													<sys:Boolean>False</sys:Boolean>
												</DiscreteObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>